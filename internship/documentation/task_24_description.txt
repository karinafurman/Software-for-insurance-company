В ходе выполнения данного задания я изучила суть концепции  IoC — это передача ответственности
за создание и управление зависимостью внешнему компоненту вместо того, чтобы объект сам создавал
свои зависимости.
Первый способ внедрения зависимости — это внедрение через конструктор, самый распространённый и
рекомендуемый способ, его плюсы: неизменяемость, явность и обязательность, лучшая тестируемость.
Второй способ — это внедрение через set-метод. Он позволяет изменять зависимость течения жизненного
 цикла объекта, хорошо подходит для зависимости, без которых объект может временно функционировать.
 Однако минусами данного метода является изменяемость (объект может находиться в неполноценном состоянии
 после создания если не вызвать set-метод). Также такой способ внедрения зависимости требует дополнительных
 усилий для обеспечения потокобезопасности, так как зависимость может быть изменена извне, и данный способ
 менее явный, поскольку не так очевидно, какие зависимости необходимы для работы класса.
Третий способ внедрения зависимости — это внедрение зависимости через поле. Этот метод позволяет писать
очень лаконичный код без конструкторов или set-медов, но минусами данного метода является нарушение
инкапсуляции: (IoC контейнер использует рефлексию для установки значения в приватное поле, что обходит
стандартные механизмы языка), сложность в тестировании (мы не можем передать зависимость без IoC-контейнера,
тест становится более громоздким), неизменяемость (поле не может быть final).
Таким образом, самый лучший способ внедрения зависимости — это внедрение через конструктор.
Его следует использовать для всех обязательных зависимостей, он обеспечивает надёжность,
неизменяемость и простоту тестирования.